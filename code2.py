
import asyncio
import logging
import sqlite3
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.methods import set_my_commands
from aiogram.types import BotCommand
from aiogram.client.default import DefaultBotProperties
import random
from datetime import datetime

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
BOT_TOKEN = "8274176969:AAGjR6eHgmTZOROhV1KeswtUdBIOegUIHMM"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
ADMIN_ID = 8469018212  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
GAME_FIELD_SIZE = 5
BOMB_COUNT = 5
START_BALANCE = 1500
CURRENCY = "Moon Game | BOT"
WIN_MULTIPLIERS = [1.25, 1.5, 1.75, 2.0, 2.5, 3.0, 3.5, 3.75, 4.0, 4.5, 4.75]
BLACKJACK_WIN_MULTIPLIER = 1.5
GRANNY_GAME_REWARD = 560
GRANNY_GAME_PENALTY = 450  # –®—Ç—Ä–∞—Ñ –∑–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–æ–≤–æ–¥
DATABASE_NAME = "bot_hub_games.db"

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ---
def init_db():
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        balance REAL DEFAULT 1500,
        games_played INTEGER DEFAULT 0,
        best_score INTEGER DEFAULT 0,
        created_at TEXT DEFAULT CURRENT_TIMESTAMP
    )
    """)

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä—ã "–†–∞–∑–º–∏–Ω–∏—Ä—É–π –±–∞–±–∫—É"
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS granny_games (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        played INTEGER DEFAULT 0,
        won INTEGER DEFAULT 0,
        FOREIGN KEY (user_id) REFERENCES users (user_id)
    )
    """)

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS transactions (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        amount REAL,
        type TEXT,
        description TEXT,
        created_at TEXT DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users (user_id)
    )
    """)

    conn.commit()
    conn.close()

init_db()

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ---
def get_user(user_id: int):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()

    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()

    if user:
        cursor.execute('SELECT played, won FROM granny_games WHERE user_id = ?', (user_id,))
        granny_stats = cursor.fetchone()
        if not granny_stats:
            cursor.execute('INSERT INTO granny_games (user_id, played, won) VALUES (?, 0, 0)', (user_id,))
            conn.commit()
            granny_stats = (0, 0)

        user_data = {
            "user_id": user[0],
            "username": user[1],
            "balance": user[2],
            "games_played": user[3],
            "best_score": user[4],
            "created_at": user[5],
            "granny_games": {
                "played": granny_stats[0],
                "won": granny_stats[1]
            }
        }
    else:
        user_data = None

    conn.close()
    return user_data

def create_user(user_id: int, username: str):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()

    cursor.execute('INSERT INTO users (user_id, username, balance) VALUES (?, ?, ?)',
                  (user_id, username, START_BALANCE))
    cursor.execute('INSERT INTO granny_games (user_id, played, won) VALUES (?, 0, 0)', (user_id,))
    cursor.execute('INSERT INTO transactions (user_id, amount, type, description) VALUES (?, ?, ?, ?)',
                  (user_id, START_BALANCE, "deposit", "Initial balance"))

    conn.commit()
    conn.close()

def update_user_balance(user_id: int, amount: float, transaction_type: str, description: str = ""):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()

    cursor.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?', (amount, user_id))
    cursor.execute('INSERT INTO transactions (user_id, amount, type, description) VALUES (?, ?, ?, ?)',
                  (user_id, amount, transaction_type, description))

    conn.commit()
    conn.close()

def update_user_stats(user_id: int, games_played: int = 0, best_score: int = 0):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()

    if games_played:
        cursor.execute('UPDATE users SET games_played = games_played + ? WHERE user_id = ?',
                      (games_played, user_id))
    if best_score:
        cursor.execute('UPDATE users SET best_score = ? WHERE user_id = ? AND (best_score < ? OR best_score = 0)',
                      (best_score, user_id, best_score))

    conn.commit()
    conn.close()

def update_granny_stats(user_id: int, won: bool = False):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()

    if won:
        cursor.execute('UPDATE granny_games SET played = played + 1, won = won + 1 WHERE user_id = ?', (user_id,))
    else:
        cursor.execute('UPDATE granny_games SET played = played + 1 WHERE user_id = ?', (user_id,))

    conn.commit()
    conn.close()

def get_top_players(limit: int = 10):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()

    cursor.execute("""
    SELECT user_id, username, balance
    FROM users
    ORDER BY balance DESC
    LIMIT ?
    """, (limit,))

    top_players = cursor.fetchall()
    conn.close()
    return top_players

# --- FSM States ---
class UserState(StatesGroup):
    menu = State()
    playing = State()
    admin_panel = State()
    admin_give = State()
    admin_take = State()
    admin_profile = State()
    betting = State()
    blackjack = State()
    blackjack_betting = State()
    granny_game = State()

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä ---
game_states = {}

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –°–∞–ø–µ—Ä–∞ ---
def create_game_field(size: int, bomb_count: int) -> list[list[str]]:
    field = [[' ' for _ in range(size)] for _ in range(size)]
    bombs_placed = 0
    while bombs_placed < bomb_count:
        x = random.randint(0, size - 1)
        y = random.randint(0, size - 1)
        if field[x][y] != 'B':
            field[x][y] = 'B'
            bombs_placed += 1
    return field

def display_field(field: list[list[str]], revealed: set[(int, int)], current_multiplier: float) -> InlineKeyboardMarkup:
    size = len(field)
    keyboard = []
    info_row = [
        InlineKeyboardButton(text=f"–ú–Ω–æ–∂–∏—Ç–µ–ª—å: {current_multiplier:.2f}x", callback_data="noop"),
        InlineKeyboardButton(text="üí∞ –ó–∞–±—Ä–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à üí∞", callback_data="cashout")
    ]
    keyboard.append(info_row)

    for x in range(size):
        row = []
        for y in range(size):
            if (x, y) in revealed:
                cell = " " if field[x][y] != 'B' else "üí£"
            else:
                cell = '‚ñ†'
            row.append(InlineKeyboardButton(text=cell, callback_data=f"click_{x}_{y}"))
        keyboard.append(row)
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def check_win(field: list[list[str]], revealed: set[(int, int)]) -> bool:
    size = len(field)
    bomb_count = sum(row.count('B') for row in field)
    return len(revealed) == size * size - bomb_count

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ë–ª–µ–∫–¥–∂–µ–∫–∞ ---
def deal_card():
    return random.randint(1, 11)

def display_blackjack_hand(cards: list[int], hide_one: bool = False) -> str:
    card_names = {
        1: "–¢—É–∑",
        11: "–í–∞–ª–µ—Ç",
        12: "–î–∞–º–∞",
        13: "–ö–æ—Ä–æ–ª—å"
    }
    if hide_one:
        displayed_cards = ["?"] + [card_names.get(card, str(card)) if card <= 10 else card_names.get(card, str(card)) for card in cards[1:]]
        return ", ".join(displayed_cards)
    else:
        displayed_cards = [card_names.get(card, str(card)) if card <= 10 else card_names.get(card, str(card)) for card in cards]
        return ", ".join(displayed_cards)

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –†–∞–∑–º–∏–Ω–∏—Ä—É–π –±–∞–±–∫—É ---
async def start_granny_game(message: types.Message, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üî¥ –ö—Ä–∞—Å–Ω—ã–π –ø—Ä–æ–≤–æ–¥", callback_data="granny_red")],
        [InlineKeyboardButton(text="üîµ –°–∏–Ω–∏–π –ø—Ä–æ–≤–æ–¥", callback_data="granny_blue")],
        [InlineKeyboardButton(text="üü¢ –ó–µ–ª–µ–Ω—ã–π –ø—Ä–æ–≤–æ–¥", callback_data="granny_green")],
        [InlineKeyboardButton(text="üü° –ñ–µ–ª—Ç—ã–π –ø—Ä–æ–≤–æ–¥", callback_data="granny_yellow")]
    ])

    await message.reply(
        "üëµ –ë–∞–±–∫–∞ —Å–ª—É—á–∞–π–Ω–æ —Å–µ–ª–∞ –Ω–∞ –º–∏–Ω—É! –ù—É–∂–Ω–æ –ø–µ—Ä–µ—Ä–µ–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–æ–≤–æ–¥, —á—Ç–æ–±—ã —Ä–∞–∑–º–∏–Ω–∏—Ä–æ–≤–∞—Ç—å –µ—ë.\n"
        "–í—ã–±–µ—Ä–∏ –ø—Ä–æ–≤–æ–¥ –¥–ª—è –ø–µ—Ä–µ—Ä–µ–∑–∞–Ω–∏—è:",
        reply_markup=keyboard
    )
    await state.set_state(UserState.granny_game)

async def handle_granny_game(query: types.CallbackQuery, state: FSMContext):
    user_id = query.from_user.id
    wire_color = query.data.split('_')[1]
    correct_wire = random.choice(["red", "blue", "green", "yellow"])

    if wire_color == correct_wire:
        reward = GRANNY_GAME_REWARD
        update_user_balance(user_id, reward, "win", "Granny game reward")
        update_granny_stats(user_id, won=True)

        user = get_user(user_id)
        await query.answer("‚úÖ –£—Å–ø–µ—Ö! –ë–∞–±–∫–∞ —Å–ø–∞—Å–µ–Ω–∞!")
        await query.message.edit_text(
            f"üéâ –¢—ã –ø–µ—Ä–µ—Ä–µ–∑–∞–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–æ–≤–æ–¥ ({correct_wire}) –∏ —Å–ø–∞—Å –±–∞–±–∫—É!\n"
            f"üí∏ –¢—ã –ø–æ–ª—É—á–∞–µ—à—å {reward} {CURRENCY}!\n"
            f"üí∞ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {user['balance']} {CURRENCY}",
            reply_markup=None
        )
    else:
        # –°–Ω–∏–º–∞–µ–º —à—Ç—Ä–∞—Ñ –∑–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä
        update_user_balance(user_id, -GRANNY_GAME_PENALTY, "penalty", "Incorrect wire in Granny game")
        update_granny_stats(user_id)

        user = get_user(user_id)
        await query.answer("üí• –ë–∞—Ö! –ë–∞–±–∫–∞ –≤–∑–æ—Ä–≤–∞–ª–∞—Å—å!")
        await query.message.edit_text(
            f"üí£ –¢—ã –ø–µ—Ä–µ—Ä–µ–∑–∞–ª –Ω–µ —Ç–æ—Ç –ø—Ä–æ–≤–æ–¥! –ë–∞–±–∫–∞ –≤–∑–æ—Ä–≤–∞–ª–∞—Å—å!\n"
            f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–æ–≤–æ–¥ –±—ã–ª: {correct_wire}\n"
            f"üí∏ –° —Ç–µ–±—è —Å–ø–∏—Å–∞–Ω–æ {GRANNY_GAME_PENALTY} {CURRENCY} –∑–∞ –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É.\n"
            f"üí∞ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {user['balance']} {CURRENCY}\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑, –º–æ–∂–µ—Ç –ø–æ–≤–µ–∑—ë—Ç!",
            reply_markup=None
        )

    await state.set_state(UserState.menu)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_menu_keyboard(is_admin: bool = False) -> ReplyKeyboardMarkup:
    keyboard = [
        [KeyboardButton(text="üïπÔ∏è –ò–≥—Ä–∞—Ç—å –≤ –°–∞–ø–µ—Ä"), KeyboardButton(text="üÉè 21 –û—á–∫–æ")],
        [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤")],
        [KeyboardButton(text="üëµ –†–∞–∑–º–∏–Ω–∏—Ä—É–π –±–∞–±–∫—É")]
    ]
    if is_admin:
        keyboard.append([KeyboardButton(text="‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")])
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def get_admin_keyboard() -> ReplyKeyboardMarkup:
    keyboard = [
        [KeyboardButton(text="‚ûï –í—ã–¥–∞—Ç—å –ö–æ–∏–Ω—ã"), KeyboardButton(text="‚ûñ –ó–∞–±—Ä–∞—Ç—å –ö–æ–∏–Ω—ã")],
        [KeyboardButton(text="üëÅÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")],
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
async def start_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name or "Player"

    if not get_user(user_id):
        create_user(user_id, username)
        await message.reply(f"üéâ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞! –ù–∞ –≤–∞—à —Å—á–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–æ {START_BALANCE} {CURRENCY}!")

    await state.set_state(UserState.menu)
    await message.reply("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Moon Game | BOT Games!",
                       reply_markup=get_menu_keyboard(user_id == ADMIN_ID))

async def menu_handler(message: types.Message, state: FSMContext):
    if message.text == "üïπÔ∏è –ò–≥—Ä–∞—Ç—å –≤ –°–∞–ø–µ—Ä":
        await message.reply("üí∞ –ö–∞–∫—É—é —Å—Ç–∞–≤–∫—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å? (–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ)")
        await state.set_state(UserState.betting)
    elif message.text == "üÉè 21 –û—á–∫–æ":
        await start_blackjack(message, state)
    elif message.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å":
        await show_profile(message, state)
    elif message.text == "üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤":
        await show_top_players(message, state)
    elif message.text == "üëµ –†–∞–∑–º–∏–Ω–∏—Ä—É–π –±–∞–±–∫—É":
        await start_granny_game(message, state)
    elif message.text == "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å" and message.from_user.id == ADMIN_ID:
        await admin_panel(message, state)
    else:
        await message.reply("ü§î –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é.")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –°–∞–ø–µ—Ä–∞ ---
async def betting_handler(message: types.Message, state: FSMContext):
    try:
        bet = float(message.text)
        user_id = message.from_user.id
        user = get_user(user_id)

        if not user:
            await message.reply("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
            return

        if bet <= 0:
            await message.reply("‚õî –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
            return

        if bet > user['balance']:
            await message.reply(f"üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {user['balance']} {CURRENCY}")
            await state.set_state(UserState.menu)
            return

        await start_new_game(message, state, bet)

    except ValueError:
        await message.reply("‚å®Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

async def start_new_game(message: types.Message, state: FSMContext, bet: float):
    user_id = message.from_user.id
    field = create_game_field(GAME_FIELD_SIZE, BOMB_COUNT)
    game_states[user_id] = {
        "field": field,
        "revealed": set(),
        "game_over": False,
        "bet": bet,
        "multiplier_index": 0
    }

    update_user_balance(user_id, -bet, "bet", "Minesweeper game bet")

    await state.set_state(UserState.playing)
    multiplier = WIN_MULTIPLIERS[game_states[user_id]["multiplier_index"]]
    await message.reply(
        f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É! –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {bet} {CURRENCY}. –û—Å—Ç–æ—Ä–æ–∂–Ω–æ, –±–æ–º–±—ã! üí£",
        reply_markup=display_field(field, game_states[user_id]["revealed"], multiplier)
    )

async def handle_callback_query(query: types.CallbackQuery, state: FSMContext):
    user_id = query.from_user.id
    user = get_user(user_id)

    if not user:
        await query.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return

    if query.data.startswith("granny_"):
        await handle_granny_game(query, state)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ Granny game callback
        return

    if user_id not in game_states or game_states[user_id]["game_over"]:
        await query.answer("–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É.")
        return

    field = game_states[user_id]["field"]
    revealed = game_states[user_id]["revealed"]
    bet = game_states[user_id]["bet"]
    multiplier_index = game_states[user_id]["multiplier_index"]
    current_multiplier = WIN_MULTIPLIERS[multiplier_index]

    if query.data == "cashout":
        win_amount = bet * current_multiplier
        update_user_balance(user_id, win_amount, "win", "Minesweeper game win")
        update_user_stats(user_id, games_played=1)
        game_states[user_id]["game_over"] = True

        history_message = (
            "üìú <b>–ò—Å—Ç–æ—Ä–∏—è Moon Game | BOT Games:</b>\n\n"
            "Moon Game | BOT Games –±—ã–ª —Å–æ–∑–¥–∞–Ω –≥—Ä—É–ø–ø–æ–π —ç–Ω—Ç—É–∑–∏–∞—Å—Ç–æ–≤, —É–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –∏–¥–µ–µ–π –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π. "
            "–ù–∞—à–∞ —Ü–µ–ª—å - –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞–º –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π –æ–ø—ã—Ç –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏ —á–µ—Å—Ç–Ω–æ–π —Å—Ä–µ–¥–µ. "
            "–ú—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–∞–∑–≤–∏–≤–∞–µ–º—Å—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∏–≥—Ä—ã, —á—Ç–æ–±—ã –∫–∞–∂–¥—ã–π –º–æ–≥ –Ω–∞–π—Ç–∏ —á—Ç–æ-—Ç–æ –ø–æ —Å–≤–æ–µ–º—É –≤–∫—É—Å—É. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏!"
        )

        await query.message.edit_text("‚úÖ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!", reply_markup=None)
        await query.answer("–í—ã –∑–∞–±—Ä–∞–ª–∏ –≤—ã–∏–≥—Ä—ã—à!")
        await query.message.answer(
            f"üí∞ –í—ã –∑–∞–±—Ä–∞–ª–∏ {win_amount:.2f} {CURRENCY}! \nüí∏ –í–∞—à –±–∞–ª–∞–Ω—Å: {user['balance']:.2f} {CURRENCY}.\n\n" + history_message,
            parse_mode="HTML",
            reply_markup=get_menu_keyboard(user_id == ADMIN_ID)
        )

        await state.set_state(UserState.menu)
        return

    x, y = map(int, query.data[6:].split('_'))

    if (x, y) in revealed:
        await query.answer("–≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞.")
        return

    revealed.add((x, y))

    if field[x][y] == 'B':
        await query.answer("üí• –ë—É–º! –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.")
        game_states[user_id]["game_over"] = True
        update_user_stats(user_id, games_played=1)

        history_message = (
            "üìú <b>–ò—Å—Ç–æ—Ä–∏—è Moon Game | BOT Games:</b>\n\n"
            "Moon Game | BOT Games –±—ã–ª —Å–æ–∑–¥–∞–Ω –≥—Ä—É–ø–ø–æ–π —ç–Ω—Ç—É–∑–∏–∞—Å—Ç–æ–≤, —É–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –∏–¥–µ–µ–π –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π. "
            "–ù–∞—à–∞ —Ü–µ–ª—å - –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞–º –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π –æ–ø—ã—Ç –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏ —á–µ—Å—Ç–Ω–æ–π —Å—Ä–µ–¥–µ. "
            "–ú—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–∞–∑–≤–∏–≤–∞–µ–º—Å—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∏–≥—Ä—ã, —á—Ç–æ–±—ã –∫–∞–∂–¥—ã–π –º–æ–≥ –Ω–∞–π—Ç–∏ —á—Ç–æ-—Ç–æ –ø–æ —Å–≤–æ–µ–º—É –≤–∫—É—Å—É. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏!"
        )

        await query.message.edit_text("üí£ –í—ã –Ω–∞—Ç–∫–Ω—É–ª–∏—Å—å –Ω–∞ –±–æ–º–±—É! –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.", reply_markup=None)
        await state.set_state(UserState.menu)

        user = get_user(user_id)
        if user['balance'] < 0:
            update_user_balance(user_id, -user['balance'], "adjustment", "Balance reset to zero")
            await query.message.answer(
                f"üò≠ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. \nüí∏ –í–∞—à –±–∞–ª–∞–Ω—Å: 0 {CURRENCY}. \n‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å –æ–±–Ω—É–ª–µ–Ω.\n\n"+history_message,
                reply_markup=get_menu_keyboard(user_id == ADMIN_ID),
                parse_mode="HTML"
            )
        else:
            await query.message.answer(
                f"üò≠ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. \nüí∏ –í–∞—à –±–∞–ª–∞–Ω—Å: {user['balance']} {CURRENCY}.\n\n"+history_message,
                reply_markup=get_menu_keyboard(user_id == ADMIN_ID),
                parse_mode="HTML"
            )
    else:
        if multiplier_index < len(WIN_MULTIPLIERS) - 1:
            multiplier_index += 1
            game_states[user_id]["multiplier_index"] = multiplier_index
            await query.answer(f"‚úÖ –ö–ª–∏–∫! \nüìà –ú–Ω–æ–∂–∏—Ç–µ–ª—å —É–≤–µ–ª–∏—á–µ–Ω –¥–æ {WIN_MULTIPLIERS[multiplier_index]:.2f}x")
        else:
            await query.answer("üî• –ö–ª–∏–∫! \nüèÜ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å!")

        current_multiplier = WIN_MULTIPLIERS[multiplier_index]
        field_markup = display_field(field, revealed, current_multiplier)
        await query.message.edit_reply_markup(reply_markup=field_markup)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ë–ª–µ–∫–¥–∂–µ–∫–∞ ---
async def start_blackjack(message: types.Message, state: FSMContext):
    await message.reply("üí∞ –ö–∞–∫—É—é —Å—Ç–∞–≤–∫—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–ª—è –∏–≥—Ä—ã –≤ 21 –æ—á–∫–æ? (–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ)")
    await state.set_state(UserState.blackjack_betting)

async def blackjack_betting_handler(message: types.Message, state: FSMContext):
    try:
        bet = float(message.text)
        user_id = message.from_user.id
        user = get_user(user_id)

        if not user:
            await message.reply("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
            return

        if bet <= 0:
            await message.reply("‚õî –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
            return

        if bet > user['balance']:
            await message.reply(f"üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {user['balance']} {CURRENCY}")
            await state.set_state(UserState.menu)
            return

        update_user_balance(user_id, -bet, "bet", "Blackjack game bet")

        player_cards = [deal_card(), deal_card()]
        dealer_cards = [deal_card(), deal_card()]

        game_states[user_id] = {
            "blackjack_player_cards": player_cards,
            "blackjack_dealer_cards": dealer_cards,
            "blackjack_bet": bet,
            "blackjack_game_over": False
        }

        player_total = sum(player_cards)
        dealer_total = sum(dealer_cards)

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–í–∑—è—Ç—å –∫–∞—Ä—Ç—É", callback_data="blackjack_hit")],
            [InlineKeyboardButton(text="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è", callback_data="blackjack_stand")]
        ])

        await state.set_state(UserState.blackjack)
        formatted_player_cards = display_blackjack_hand(player_cards)
        formatted_dealer_cards = display_blackjack_hand(dealer_cards, hide_one=True)
        await message.reply(
            f"üÉè –ò–≥—Ä–∞ '21 –æ—á–∫–æ' –Ω–∞—á–∞–ª–∞—Å—å!\n\n"
            f"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {formatted_player_cards} (–°—É–º–º–∞: {player_total})\n"
            f"–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: {formatted_dealer_cards} (–°—É–º–º–∞: {dealer_total if dealer_total <=10 else '?'})\n\n"
            f"–ß—Ç–æ –¥–µ–ª–∞–µ–º?",
            reply_markup=keyboard
        )

    except ValueError:
        await message.reply("‚å®Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

async def blackjack_handler(query: types.CallbackQuery, state: FSMContext):
    user_id = query.from_user.id
    user = get_user(user_id)

    if not user:
        await query.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return

    player_cards = game_states[user_id]["blackjack_player_cards"]
    dealer_cards = game_states[user_id]["blackjack_dealer_cards"]
    bet = game_states[user_id]["blackjack_bet"]

    if query.data == "blackjack_hit":
        player_cards.append(deal_card())
        game_states[user_id]["blackjack_player_cards"] = player_cards
        player_total = sum(player_cards)

        if player_total > 21:
            await query.answer("–ü–µ—Ä–µ–±–æ—Ä!")
            formatted_player_cards = display_blackjack_hand(player_cards)
            formatted_dealer_cards = display_blackjack_hand(dealer_cards)
            await query.message.edit_text(
                f"üÉè –£ –≤–∞—Å –ø–µ—Ä–µ–±–æ—Ä! (–°—É–º–º–∞: {player_total})\n"
                f"–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: {formatted_dealer_cards} (–°—É–º–º–∞: {sum(dealer_cards)})\n\n"
                f"–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ {bet:.2f} {CURRENCY}!",
                reply_markup=None
            )
            update_user_stats(user_id, games_played=1)
            await state.set_state(UserState.menu)
        else:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–í–∑—è—Ç—å –∫–∞—Ä—Ç—É", callback_data="blackjack_hit")],
                [InlineKeyboardButton(text="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è", callback_data="blackjack_stand")]
            ])
            formatted_player_cards = display_blackjack_hand(player_cards)
            formatted_dealer_cards = display_blackjack_hand(dealer_cards, hide_one=True)
            await query.answer("–í–∑—è–ª–∏ –∫–∞—Ä—Ç—É.")
            await query.message.edit_text(
                f"üÉè –í–∞—à–∏ –∫–∞—Ä—Ç—ã: {formatted_player_cards} (–°—É–º–º–∞: {player_total})\n"
                f"–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: {formatted_dealer_cards} (–°—É–º–º–∞: {sum(dealer_cards) if sum(dealer_cards) <= 10 else '?'})\n\n"
                f"–ß—Ç–æ –¥–µ–ª–∞–µ–º?",
                reply_markup=keyboard
            )

    elif query.data == "blackjack_stand":
        player_total = sum(player_cards)
        dealer_total = sum(dealer_cards)

        while dealer_total < 17:
            dealer_cards.append(deal_card())
            dealer_total = sum(dealer_cards)
            game_states[user_id]["blackjack_dealer_cards"] = dealer_cards

        if dealer_total > 21 or player_total > dealer_total:
            win_amount = bet * BLACKJACK_WIN_MULTIPLIER
            update_user_balance(user_id, win_amount, "win", "Blackjack game win")
            update_user_stats(user_id, games_played=1)
            await query.answer("–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!")
            formatted_player_cards = display_blackjack_hand(player_cards)
            formatted_dealer_cards = display_blackjack_hand(dealer_cards)
            user = get_user(user_id)
            await query.message.edit_text(
                f"üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! (–°—É–º–º–∞: {player_total})\n"
                f"–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: {formatted_dealer_cards} (–°—É–º–º–∞: {dealer_total})\n\n"
                f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {win_amount:.2f} {CURRENCY}!\n"
                f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user['balance']:.2f} {CURRENCY}",
                reply_markup=None
            )

        elif player_total == dealer_total:
            update_user_balance(user_id, bet, "refund", "Blackjack game draw")
            update_user_stats(user_id, games_played=1)
            await query.answer("–ù–∏—á—å—è!")
            formatted_player_cards = display_blackjack_hand(player_cards)
            formatted_dealer_cards = display_blackjack_hand(dealer_cards)
            user = get_user(user_id)
            await query.message.edit_text(
                f"ü§ù –ù–∏—á—å—è! (–°—É–º–º–∞: {player_total})\n"
                f"–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: {formatted_dealer_cards} (–°—É–º–º–∞: {dealer_total})\n\n"
                f"–°—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞.\n"
                f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user['balance']:.2f} {CURRENCY}",
                reply_markup=None
            )
        else:
            update_user_stats(user_id, games_played=1)
            await query.answer("–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.")
            formatted_player_cards = display_blackjack_hand(player_cards)
            formatted_dealer_cards = display_blackjack_hand(dealer_cards)
            user = get_user(user_id)
            await query.message.edit_text(
                f"üò≠ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! (–°—É–º–º–∞: {player_total})\n"
                f"–ö–∞—Ä—Ç—ã –¥–∏–ª–µ—Ä–∞: {formatted_dealer_cards} (–°—É–º–º–∞: {dealer_total})\n\n"
                f"–í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ {bet:.2f} {CURRENCY}!\n"
                f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user['balance']:.2f} {CURRENCY}",
                reply_markup=None
            )

        await state.set_state(UserState.menu)

# --- –ü—Ä–æ—Ñ–∏–ª—å –∏ —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ ---
async def show_profile(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user = get_user(user_id)

    if user:
        message_text = (
            "<b>üìä –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n"
            f"<b>üí∞ –ë–∞–ª–∞–Ω—Å:</b> {user['balance']} {CURRENCY}\n"
            f"<b>üéÆ –°—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä:</b> {user['games_played']}\n"
            f"<b>üèÜ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ '–°–∞–ø–µ—Ä–µ':</b> {user['best_score']}\n"
            f"<b>üëµ –ò–≥—Ä '–†–∞–∑–º–∏–Ω–∏—Ä—É–π –±–∞–±–∫—É':</b> {user['granny_games']['played']} (–ø–æ–±–µ–¥: {user['granny_games']['won']})\n\n"
            "‚ú® –£–¥–∞—á–∏ –≤ –Ω–æ–≤—ã—Ö –∏–≥—Ä–∞—Ö! ‚ú®"
        )
        await message.reply(
            message_text,
            parse_mode="HTML",
            reply_markup=get_menu_keyboard(message.from_user.id == ADMIN_ID)
        )
    else:
        await message.reply(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è.",
            reply_markup=get_menu_keyboard(message.from_user.id == ADMIN_ID)
        )
    await state.set_state(UserState.menu)

async def show_top_players(message: types.Message, state: FSMContext):
    top_players = get_top_players()
    message_text = "<b>üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:</b>\n\n"
    for i, (user_id, username, balance) in enumerate(top_players):
        message_text += f"<b>{i + 1}.</b> {username}: {balance} {CURRENCY}\n"
    await message.reply(
        message_text,
        parse_mode="HTML",
        reply_markup=get_menu_keyboard(message.from_user.id == ADMIN_ID)
    )
    await state.set_state(UserState.menu)

# --- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ---
async def admin_panel(message: types.Message, state: FSMContext):
    if message.from_user.id == ADMIN_ID:
        await message.reply("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=get_admin_keyboard())
        await state.set_state(UserState.admin_panel)
    else:
        await message.reply(
            "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.",
            reply_markup=get_menu_keyboard(message.from_user.id == ADMIN_ID)
        )

async def admin_handler(message: types.Message, state: FSMContext):
    if message.text == "‚ûï –í—ã–¥–∞—Ç—å –ö–æ–∏–Ω—ã":
        await message.reply("‚å®Ô∏è –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, 123456789 100)")
        await state.set_state(UserState.admin_give)
    elif message.text == "‚ûñ –ó–∞–±—Ä–∞—Ç—å –ö–æ–∏–Ω—ã":
        await message.reply("‚å®Ô∏è –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, 123456789 50)")
        await state.set_state(UserState.admin_take)
    elif message.text == "üëÅÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å":
        await message.reply("‚å®Ô∏è –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è")
        await state.set_state(UserState.admin_profile)
    elif message.text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        await start_command(message, state)
    else:
        await message.reply("ü§î –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")

async def admin_give_handler(message: types.Message, state: FSMContext):
    try:
        user_id, amount = map(float, message.text.split())
        user_id = int(user_id)
        amount = float(amount)
        
        user = get_user(user_id)
        if user:
            update_user_balance(user_id, amount, "admin_deposit", f"Admin deposit by {message.from_user.id}")
            await message.reply(
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} {CURRENCY} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.", 
                reply_markup=get_admin_keyboard()
            )
            try:
                bot = Bot.get_current()
                await bot.send_message(user_id, f"üéâ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞—á–∏—Å–ª–∏–ª –≤–∞–º {amount} {CURRENCY}!")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        else:
            await message.reply("‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_admin_keyboard())
    except ValueError:
        await message.reply(
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, 123456789 100)", 
            reply_markup=get_admin_keyboard()
        )
    await state.set_state(UserState.admin_panel)

async def admin_take_handler(message: types.Message, state: FSMContext):
    try:
        user_id, amount = map(float, message.text.split())
        user_id = int(user_id)
        amount = float(amount)
        
        user = get_user(user_id)
        if user:
            update_user_balance(user_id, -amount, "admin_withdrawal", f"Admin withdrawal by {message.from_user.id}")
            await message.reply(
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç–æ {amount} {CURRENCY} —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.", 
                reply_markup=get_admin_keyboard()
            )
        else:
            await message.reply("‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_admin_keyboard())
    except ValueError:
        await message.reply(
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, 123456789 50)", 
            reply_markup=get_admin_keyboard()
        )
    await state.set_state(UserState.admin_panel)

async def admin_profile_handler(message: types.Message, state: FSMContext):
    try:
        user_id = int(message.text)
        user = get_user(user_id)
        
        if user:
            message_text = (
                f"<b>üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:</b>\n\n"
                f"<b>üí∞ –ë–∞–ª–∞–Ω—Å:</b> {profile['balance']} {CURRENCY}\n"
                f"<b>üéÆ –°—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä:</b> {profile['games_played']}\n"
                f"<b>üèÜ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ '–°–∞–ø–µ—Ä–µ':</b> {profile['best_score']}\n"
                f"<b>üëµ –ò–≥—Ä '–†–∞–∑–º–∏–Ω–∏—Ä—É–π –±–∞–±–∫—É':</b> {granny_stats['played']} (–ø–æ–±–µ–¥: {granny_stats['won']})"
            )
            await message.reply(message_text, parse_mode="HTML", reply_markup=get_admin_keyboard())
        else:
            await message.reply("‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_admin_keyboard())
    except ValueError:
        await message.reply("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 123456789)", reply_markup=get_admin_keyboard())
    await state.set_state(UserState.admin_panel)

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---
def register_handlers(dp: Dispatcher):
    dp.message.register(start_command, CommandStart(), StateFilter(None))
    dp.message.register(menu_handler, StateFilter(UserState.menu))
    dp.message.register(betting_handler, StateFilter(UserState.betting))
    dp.callback_query.register(handle_callback_query, StateFilter(UserState.playing))
    dp.message.register(show_profile, F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å", StateFilter(UserState.menu))
    dp.message.register(show_top_players, F.text == "üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤", StateFilter(UserState.menu))
    dp.message.register(admin_panel, F.text == "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", StateFilter(UserState.menu), F.from_user.id == ADMIN_ID)
    dp.message.register(admin_handler, StateFilter(UserState.admin_panel), F.from_user.id == ADMIN_ID)
    dp.message.register(admin_give_handler, StateFilter(UserState.admin_give), F.from_user.id == ADMIN_ID)
    dp.message.register(admin_take_handler, StateFilter(UserState.admin_take), F.from_user.id == ADMIN_ID)
    dp.message.register(admin_profile_handler, StateFilter(UserState.admin_profile), F.from_user.id == ADMIN_ID)
    dp.message.register(blackjack_betting_handler, StateFilter(UserState.blackjack_betting))
    dp.callback_query.register(blackjack_handler, StateFilter(UserState.blackjack))
    dp.message.register(start_blackjack, F.text == "üÉè 21 –û—á–∫–æ", StateFilter(UserState.menu))
    dp.message.register(start_granny_game, F.text == "üëµ –†–∞–∑–º–∏–Ω–∏—Ä—É–π –±–∞–±–∫—É 18+", StateFilter(UserState.menu))
    dp.callback_query.register(handle_granny_game, StateFilter(UserState.granny_game))

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    storage = MemoryStorage()
    bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
    dp = Dispatcher(storage=storage)
    register_handlers(dp)

    commands = [
        BotCommand(command="start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
    ]
    await bot.set_my_commands(commands=commands)

    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())